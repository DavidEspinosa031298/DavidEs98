#SESION 7

#RETO 1

#Definir los campos y tipos de datos para la tabla 
movies haciendo uso de los archivos movies.dat y 
README.

Primero se revisan los registros abriendo el archivo.

Y luego se revisa la documentación (archivo README)

MOVIES FILE DESCRIPTION

Movie information is in the file "movies.dat" and is in the following
format:

MovieID::Title::Genres

- Titles are identical to titles provided by the IMDB (including
year of release)
- Genres are pipe-separated and are selected from the following genres:

Así que se definen los siguientes campos y tipo para crear la tabla movies en SQL:

id INT PRIMARY KEY
title VARCHAR(80)
generos VARCHAR(80)

#Crear la tabla movies (recuerda usar el mismo nombre 
del archivo sin la extensión para vincular nombres 
de tablas con archivos).

CREATE TABLE IF NOT EXISTS movies (
   id INT PRIMARY KEY, 
   title VARCHAR(80), 
   generos VARCHAR(80)
); 

#Definir los campos y tipos de datos para la tabla 
ratings haciendo uso de los archivos ratings.dat y 
README.

Ahora se revisan la estructura registros abriendo el archivo restante.

Y luego se revisa la documentación (archivo README)

RATINGS FILE DESCRIPTION

All ratings are contained in the file "ratings.dat" and are in the
following format:

UserID::MovieID::Rating::Timestamp

- UserIDs range between 1 and 6040
- MovieIDs range between 1 and 3952
- Ratings are made on a 5-star scale (whole-star ratings only)
- Timestamp is represented in seconds since the epoch as returned by time(2)
- Each user has at least 20 ratings

USERS FILE DESCRIPTION

User information is in the file "users.dat" and is in the following
format:

UserID::Gender::Age::Occupation::Zip-code

All demographic information is provided voluntarily by the users and is
...
Así que se definen los siguientes campos y tipo para crear la tabla ratings en SQL:

userid INT
movieid INT
rating INT
time_stamp BIGINT

#Crear la tabla ratings 
(recuerda usar el mismo nombre del archivo sin la 
extensión para vincular nombres de tablas con 
archivos)

CREATE TABLE IF NOT EXISTS ratings (
   userid INT, 
   movieid INT, 
   rating INT, 
   time_stamp BIGINT
);
